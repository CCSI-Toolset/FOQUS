{
  "flowsheet": {
    "simList": {}, 
    "wegAccMin": -9.0, 
    "post_solve_nodes": [], 
    "singleCount": 0, 
    "tearSolver": "Wegstein", 
    "onlySingleNode": null, 
    "errorStat": -1, 
    "pre_solve_nodes": [], 
    "no_solve_nodes": [], 
    "tearTolType": "abs", 
    "edges": [], 
    "results": {
      "_currentFilter": null, 
      "results": [], 
      "filters": {
        "all": {
          "errors": null, 
          "tags": null, 
          "indexes": null, 
          "names": null, 
          "filters": [], 
          "sets": null, 
          "pyfunc": null
        }, 
        "none": {
          "errors": null, 
          "tags": null, 
          "indexes": [], 
          "names": null, 
          "filters": [], 
          "sets": null, 
          "pyfunc": null
        }
      }
    }, 
    "tearTol": 0.001, 
    "output": {
      "Test": {
        "f": {
          "optVar": false, 
          "scaling": "None", 
          "set": "user", 
          "dist": {
            "firstParamValue": null, 
            "type": "N", 
            "secondParamValue": null
          }, 
          "scaleFact": 1.0, 
          "min": 0.0, 
          "default": 0.0, 
          "dtype": "float", 
          "tags": [], 
          "ts": 0, 
          "hist": [
            245.0
          ], 
          "uqVar": false, 
          "shape": [], 
          "max": 0.0, 
          "unit": "None", 
          "desc": "Output"
        }
      }
    }, 
    "input": {
      "Test": {
        "x": {
          "optVar": true, 
          "scaling": "Linear", 
          "set": "user", 
          "dist": {
            "firstParamValue": null, 
            "type": "N", 
            "secondParamValue": null
          }, 
          "scaleFact": 1.0, 
          "min": [
            0.0, 
            0.0
          ], 
          "default": [
            4.0, 
            4.0
          ], 
          "dtype": "float", 
          "tags": [], 
          "ts": 0, 
          "hist": [
            [
              4.0, 
              4.0
            ]
          ], 
          "uqVar": false, 
          "shape": [
            2
          ], 
          "max": [
            10.0, 
            10.0
          ], 
          "unit": "None", 
          "desc": "Input"
        }
      }
    }, 
    "nodes": {
      "Test": {
        "modelName": "", 
        "pythonCode": "x1 = x[\"x\"][0]\nx2 = x[\"x\"][1]\n\nf[\"f\"] = x1**4 - 2*x2*x1**2 + x2**2 + x1**2 - 2*x1 + 5", 
        "calcError": -1, 
        "modelType": 0, 
        "y": -300.0, 
        "x": -500.0, 
        "z": 0.0, 
        "options": {
          "order": [], 
          "options": {}
        }
      }
    }, 
    "tearMaxIt": 40, 
    "wegAccMax": 9.0
  }, 
  "optProblem": {
    "solverOptions": {
      "OptCMA": {
        "upper": 10.0, 
        "lower": 0.0, 
        "sd0": 2, 
        "Restart modulus": 1, 
        "Results name": "CMA_Results", 
        "Backup interval": 10, 
        "popsize": 6, 
        "Save results": true, 
        "itmax": 0, 
        "seed": 0, 
        "Restart out": "", 
        "It timeout": 3600, 
        "Restart in": "", 
        "Max time": 48
      }
    }, 
    "solver": "OptCMA", 
    "obj": [
      {
        "pycode": "f[\"Test\"][\"f\"]", 
        "fail": 1000.0, 
        "penScale": 1.0
      }
    ], 
    "g": [], 
    "v": [
      "Test.x"
    ]
  }, 
  "CCSIFileMetaData": {
    "MIMEType": "application/ccsi+foqus", 
    "Confidence": "experimental", 
    "DisplayName": "Opt_Test_02", 
    "CreationTime": "2014-10-03T10:50:41", 
    "Application": "foqus", 
    "UpdateMetadata": true, 
    "Version": "00.00", 
    "Parents": [], 
    "ID": "22a253a626c74b82a92693e428d830d5", 
    "OriginalFilename": "Opt_Test_02.json", 
    "Description": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\np, li { white-space: pre-wrap; }\n</style></head><body style=\" font-family:'Arial'; font-size:10pt; font-weight:400; font-style:normal;\">\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt; font-weight:600; text-decoration: underline;\">Optimization Test 02</span></p>\n<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:12pt; font-weight:600; text-decoration: underline;\"><br /></p>\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">This example is the same as &quot;Opt_Test_01.json&quot; except that the input varible x is a vector.  The optimization problem is to mininize the following function:</span></p>\n<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:12pt;\"><br /></p>\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">f = x</span><span style=\" font-size:12pt; vertical-align:sub;\">1</span><span style=\" font-size:12pt; vertical-align:super;\">4</span><span style=\" font-size:12pt;\"> - 2x</span><span style=\" font-size:12pt; vertical-align:sub;\">2</span><span style=\" font-size:12pt;\">x</span><span style=\" font-size:12pt; vertical-align:sub;\">1</span><span style=\" font-size:12pt; vertical-align:super;\">2</span><span style=\" font-size:12pt;\"> + x</span><span style=\" font-size:12pt; vertical-align:sub;\">2</span><span style=\" font-size:12pt; vertical-align:super;\">2</span><span style=\" font-size:12pt;\"> + x</span><span style=\" font-size:12pt; vertical-align:sub;\">1</span><span style=\" font-size:12pt; vertical-align:super;\">2</span><span style=\" font-size:12pt;\"> - 2x</span><span style=\" font-size:12pt; vertical-align:sub;\">1</span><span style=\" font-size:12pt;\"> + 5</span></p>\n<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:12pt;\"><br /></p>\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">The node calculations are performed in Python, so the problem solves very quickly.  This provides a simple problem for testing optimization and constraint handeling, and vector variables.</span></p></body></html>", 
    "ChangeLog": {
      "2014-10-03T10:50:41": [
        "00.00", 
        "22a253a626c74b82a92693e428d830d5", 
        "Opt_Test_02", 
        "Updated example format for newest FOQUS version"
      ]
    }, 
    "ModificationTime": "2014-10-03T10:50:41", 
    "Role": "Input"
  }, 
  "surrogateProblem": {
    "input": [], 
    "inputScaleFact": {}, 
    "options": {
      "Adaptive Sampling": false, 
      "Include Exp": false, 
      "Single Variable Term Powers": [
        1
      ], 
      "Input File": "alamo.alm", 
      "Two Variable Term Powers": [], 
      "Validation Data Filter": "none", 
      "Ratio Term Powers": [], 
      "Initial Data Filter": "all", 
      "PSUADE Driver Export File": "surrogate_ps.py", 
      "Include Cos": false, 
      "Failure Value": -111111, 
      "Maximum Run Time": 2000, 
      "Include Tan": false, 
      "Three Variable Term Powers": [], 
      "Include Sin": false, 
      "Include Log": false, 
      "FOQUS Model Export File": "surrogate_pg.py", 
      "Keep Temporary Files": false
    }, 
    "output": []
  }, 
  "uqSimList": [], 
  "Type": "FOQUS_Session", 
  "ID": "Opt_Test_02_141003104852"
}